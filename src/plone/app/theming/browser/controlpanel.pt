<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
      xmlns:tal="http://xml.zope.org/namespaces/tal"
      xmlns:metal="http://xml.zope.org/namespaces/metal"
      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
    lang="en"
    metal:use-macro="context/prefs_main_template/macros/master"
    i18n:domain="plone">

<body>

<div metal:fill-slot="prefs_configlet_main">

    <h1 class="documentFirstHeading"
        i18n:translate="heading_theme_settings">Theme settings</h1>

    <a href=""
        class="link-parent"
        tal:attributes="href string:${portal_url}/plone_control_panel"
        i18n:translate="label_up_to_plone_setup">
            Up to Site Setup
    </a>

    <p i18n:translate="description_theme_settings">
        Use this control panel to enable a Diazo theme. You can either
        select a pre-registered theme, or configure a theme directly by
        specifying a rules file.
    </p>
    
    <form
        name="settings"
        method="post" 
        class="enableFormTabbing enableUnloadProtection"
        tal:attributes="action request/URL"
        tal:define="errors view/errors">

        <!-- Field set: global settings -->
        <fieldset id="fieldset-basic-settings">
            <legend
                id="fieldsetlegend-basic-settings" 
                i18n:translate="legend_basic_settings">Theme settings</legend>
            
            <div class="discreet" i18n:translate="description_basic_settings">
                To enable a theme registered with Plone, choose it from the
                list below and make sure <em>Enable theme</em> is selected.
                It is also possible to use themes that are not pre-registered
                with Plone. Use the <em>Advanced</em> tab to configure a
                theme manually.
            </div>
            
            <div
                class="field"
                tal:define="selected python:request.get('enabled', view.settings.enabled)">
    
                <input type="hidden" value="" name="enabled:boolean:default" />
                <input type="checkbox" value="1" name="enabled:boolean" id="enabled"
                    tal:attributes="checked python:'checked' if selected else None"
                    />
                <label for="enabled" i18n:translate="label_enabled">Enable theme</label>
                <div class="formHelp" i18n:translate="help_enabled">
                    If this option is disabled, no theme will be applied.
                </div>
    
            </div>

            <div
                class="field"
                tal:define="selected python:request.get('selectedTheme', view.selectedTheme)">

                <label for="selectedTheme" i18n:translate="label_selected_theme">Select a theme</label>
                <div class="formHelp" i18n:translate="help_selected_theme">
                    Select a theme from the list below to apply this theme.
                </div>

                <select size="1" id="selectedTheme" name="selectedTheme">
                    <option
                        value=""
                        i18n:translate="label_please_select_theme">Please select</option>
                    <option
                        value=""
                        tal:condition="python:not selected and view.settings.rules is not None"
                        selected="selected"
                        i18n:translate="label_other">Other (see advanced tab)</option>
                    <option
                        tal:repeat="theme view/availableThemes"
                        tal:content="theme/title"
                        tal:attributes="value theme/id;
                                        title theme/description;
                                        selected python:theme['id'] == selected and 'selected' or None"
                        />
                </select>
                
            </div>
        
        </fieldset>
        
        <!-- Field set: advanced -->
        <fieldset id="fieldset-advanced">
            <legend
                id="fieldsetlegend-advanced" 
                i18n:translate="legend_advanced">Advanced</legend>

            <div class="discreet" i18n:translate="description_advanced">
               Use the fields below to configure the Diazo rules file and
               absolute path prefix, or to enable reading a theme from a
               remote server.               
            </div>
            
            <div
                tal:define="error errors/rules | nothing;
                            rules python:request.get('rules', view.settings.rules)"
                tal:attributes="class python:'field error' if error else 'field'">
                
                <label for="rules" i18n:translate="label_rules">Rules file</label>
                <div class="formHelp" i18n:translate="help_rules">
                    Enter a path or URL for the theme rules file.
                </div>
                
                <div tal:replace="error" tal:condition="error" />
                
                <input
                    name="rules"
                    id="rules"
                    type="text"
                    tal:attributes="value rules"
                    />
            
            </div>
            
            <div
                tal:define="error errors/absolutePrefix | nothing;
                            absolutePrefix python:request.get('absolutePrefix', view.settings.absolutePrefix)"
                tal:attributes="class python:'field error' if error else 'field'">
                
                <label for="absolutePrefix" i18n:translate="label_absolute_prefix">Absolute path prefix</label>
                <div class="formHelp" i18n:translate="help_rules">
                    If your theme uses relative paths for images, stylesheets
                    or other resources, you can enter a prefix here to make
                    sure these resources will work regardless of which page
                    Plone is rendering.
                </div>
                
                <div tal:replace="error" tal:condition="error" />
                
                <input
                    name="absolutePrefix"
                    id="absolutePrefix"
                    type="text"
                    tal:attributes="value absolutePrefix"
                    />
            
            </div>
            
            <div
                class="field"
                tal:define="selected python:request.get('readNetwork', view.settings.readNetwork)">
    
                <input type="hidden" value="" name="readNetwork:boolean:default" />
                <input type="checkbox" value="1" name="readNetwork:boolean" id="readNetwork"
                    tal:attributes="checked python:'readNetwork' if selected else None"
                    />
                <label for="readNetwork" i18n:translate="label_read_network">Read network</label>
                <div class="formHelp" i18n:translate="help_read_network">
                    Allow rules and themes to be read from remote servers.
                </div>
    
            </div>
        
        </fieldset>

        <div class="formControls">
            <input
                type="submit"
                name="form.button.Save"
                class="context"
                value="Save"
                i18n:attributes="value" />

            <input
                type="submit"
                name="form.button.Cancel"
                class="context"
                value="Cancel"
                i18n:attributes="value" />
        </div>
        
        <input tal:replace="structure context/@@authenticator/authenticator" />
        
    </form>

</div>

</body>
</html>