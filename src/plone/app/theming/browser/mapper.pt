<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
      xmlns:tal="http://xml.zope.org/namespaces/tal"
      xmlns:metal="http://xml.zope.org/namespaces/metal"
      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
    lang="en"
    metal:use-macro="context/prefs_main_template/macros/master"
    i18n:domain="plone">

<head>
<metal:block fill-slot="top_slot">

<tal:defines define="dummy python:request.set('disable_border',1);
                     disable_column_one python:request.set('disable_plone.leftcolumn',1);
                     disable_column_two python:request.set('disable_plone.rightcolumn',1);"/>

<!-- ACE editor -->
<script
    type="text/javascript"
    charset="utf-8"
    tal:attributes="src string:${context/absolute_url}/++resource++plone.app.theming.editor/ace/ace.js"
    ></script>

<!-- Theme -->
<script
    type="text/javascript"
    charset="utf-8"
    tal:attributes="src string:${context/absolute_url}/++resource++plone.app.theming.editor/ace/theme-textmate.js"
    ></script>

<!-- Syntax highlighting -->
<script
    type="text/javascript"
    charset="utf-8"
    tal:attributes="src string:${context/absolute_url}/++resource++plone.app.theming.editor/ace/mode-xml.js"
    ></script>
<script
    type="text/javascript"
    charset="utf-8"
    tal:attributes="src string:${context/absolute_url}/++resource++plone.app.theming.editor/ace/mode-html.js"
    ></script>
<script
    type="text/javascript"
    charset="utf-8"
    tal:attributes="src string:${context/absolute_url}/++resource++plone.app.theming.editor/ace/mode-css.js"
    ></script>
<script
    type="text/javascript"
    charset="utf-8"
    tal:attributes="src string:${context/absolute_url}/++resource++plone.app.theming.editor/ace/mode-javascript.js"
    ></script>


<!-- Mapper tools -->
<script
    type="text/javascript"
    charset="utf-8"
    tal:attributes="src string:${context/absolute_url}/++resource++plone.app.theming.editor/mapper.js"
    ></script>


<!-- Styling for this page -->
<link
    rel="stylesheet"
    type="text/css"
    tal:attributes="href string:${context/absolute_url}/++resource++plone.app.theming.editor/mapper.css"
    />

<script type="text/javascript" tal:content="view/jsVariables"></script>

<script type="text/javascript">
    
    jQuery(function($) {
        
        $(document).ready(function() {

            var WINDOW_BASE = window.location.protocol + '//' + window.location.host;

            // Editor management

            function initEditor(element, mode, data, readonly) {
                var editor = ace.edit(element);
                editor.setTheme("ace/theme/textmate");
                editor.getSession().setTabSize(4);
                editor.getSession().setUseSoftTabs(true);
                editor.getSession().setUseWrapMode(false);
                editor.getSession().setMode(mode);
                editor.renderer.setShowGutter(false);
                editor.setShowPrintMargin(false);
                editor.setReadOnly(readonly);

                editor.getSession().setValue(data);
                editor.navigateTo(0, 0);

                return editor;
            }

            var HTMLMode = require("ace/mode/html").Mode;
            var CSSMode  = require("ace/mode/css").Mode;
            var XMLMode  = require("ace/mode/xml").Mode;
            var JSMode   = require("ace/mode/javascript").Mode;
            var TextMode = require("ace/mode/text").Mode;

            var extensionModes = {
                css: new CSSMode(),
                js: new JSMode(),
                htm: new HTMLMode(),
                html: new HTMLMode(),
                xml: new XMLMode()
            };
            var defaultMode = new TextMode();

            var ruleBuilder = null; // initialised in the closure for the rule editor
            var dirties = {}; // which things are dirty?

            function getExtension(path) {
                var m = path.match(/.(\w+)$/);
                if(m == null) return null;
                return m[1];
            }

            function refreshPreview() {
                $('#preview-frame').attr("src", $('#preview-frame').attr("src"));
            }

            window.onbeforeunload = function() {
                for(key in dirties) {
                    if(dirties[key]) {
                        return $("#unload-warning-text").text();
                    }
                }
            };

            // Rules editor
            (function() {
                
                var editor = initEditor('editor', extensionModes.html, $("#file-contents").text(), false);            
                editor.getSession().on('change', function() {
                    dirties['rules.xml'] = true;
                });
                var overlay = null;
                
                function updateRule(ruleBuilder) {
                    $("#new-rule-output").text(ruleBuilder.buildRule(
                        $('#new-rule-content-children').is(':checked'), 
                        $('#new-rule-theme-children').is(':checked')
                    ));   
                }

                ruleBuilder = new RuleBuilder(function(ruleBuilder) {
                    $(".wizard-text").css('display', 'none');
                    $.mask.close();

                    if(ruleBuilder.currentScope == 'content') {
                        if(overlay.isOpened()) {
                            overlay.close();
                        }

                        $("#new-rule-text-select-content").css('display', 'inline-block');
                        $("#view-content-preview").click();
                        $("#content-split, .wizard-text").expose();
                    
                    } else if(ruleBuilder.currentScope == 'theme') {
                        if(overlay.isOpened()) {
                            overlay.close();
                        }

                        $("#new-rule-text-select-theme").css('display', 'inline-block');
                        $("#view-theme-preview").click();
                        $("#theme-split, .wizard-text").expose();

                    } else if(ruleBuilder.rule != null && ruleBuilder.currentScope == null) {
                        $("#new-rule-step-1").hide();
                        $("#new-rule-step-2").show();
                        updateRule(ruleBuilder);

                        if(!overlay.isOpened()) {
                            overlay.load();    
                        }

                    } else { // end

                        if(overlay.isOpened()) {
                            overlay.close();
                        }

                        $("#new-rule-step-1").show();
                        $("#new-rule-step-2").hide();


                    }
                });

                var triggers = $("#new-rule").overlay({
                    closeOnClick: false,
                    onBeforeClose: function() {
                        if(ruleBuilder.active && $("#new-rule-step-2").is(":visible")) {
                            ruleBuilder.end();
                            $(".hideDuringWizard").fadeIn();    
                        }
                    }
                });

                var overlay = $(triggers[0]).data('overlay');

                $("#rules-save").click(function() {
                    
                    var data = editor.getSession().getValue();
                    $("#file-contents").text(data);

                    $.ajax({
                        url: THEME_BASE_URL + '/@@theming-controlpanel-mapper-save',
                        data: {value: data},
                        type: 'POST',
                        success: function(){
                            refreshPreview();
                            dirties['rules.xml'] = false;
                            editor.focus();
                        }
                    });
                });

                $(".rule-modifier").change(function() {
                    updateRule(ruleBuilder);
                });

                $("#new-rule-step-1 button.next").click(function() {
                    var ruleType = $("input[name='new-rule-type']:checked").val();
                    ruleBuilder.start(ruleType);

                    $(".hideDuringWizard").fadeOut('slow');
                });

                $("#new-rule-step-2 button.insert").click(function() {
                    
                    var rule = $("#new-rule-output").text();

                    function findStartTag(backwards) {
                        editor.find("<\\w+", {
                            backwards: backwards,
                            wrap: false,
                            wholeWord: false,
                            regExp: true
                        });
                    }

                    function indent(string, amount) {
                        var padding = '';
                        for(var i = 0; i < amount; ++i) {
                            padding += ' ';
                        }
                        return padding + string.replace(/\n/g, '\n' + padding) + '\n\n';
                    }

                    // Go to the next opening tag - we want to insert before this
                    findStartTag(false);
                    if(editor.getCursorPosition().row <= 1) {
                        // Probably the opening rules tag
                        findStartTag(false);
                    }

                    var selectionText = editor.getSession().getTextRange(editor.getSelectionRange());

                    // If we didn't find anything, look for the end of the current tag
                    if(selectionText == "") {

                        editor.find("(/>|<" + "/)", {
                            backwards: false,
                            wrap: false,
                            wholeWord: false,
                            regExp: true
                        });

                        var selectionText = editor.getSession().getTextRange(editor.getSelectionRange());
                        if(selectionText == "") {
                            // Still nothing? Go to the end
                            editor.navigateFileEnd();
                        } else {
                            // Go one past the end tag, but first figure out how far we should i
                            editor.navigateDown();
                        }

                    } 

                    var indentation = editor.getSelectionRange().start.column;

                    var cursorPosition = editor.getCursorPosition();
                    var newlines = rule.match(/\n/g);
                    var rows = 0;
                    if(newlines != null) {
                        rows = newlines.length;
                    }

                    editor.navigateTo(cursorPosition.row, 0);
                    editor.insert(indent(rule, indentation));
                    editor.navigateTo(cursorPosition.row, 0);
                    editor.getSelection().selectTo(cursorPosition.row + rows + 1, 0);
                    
                    overlay.close();
                });
            })();

            // Preview panel
            (function() {
                
                var previewSource = initEditor('preview-source', extensionModes.html, "", true);

                $("#preview-frame").ready(function() {
                    var linkManager = new LinkManager("#preview-frame", 'apply', WINDOW_BASE, THEME_BASE_URL);
                    function setup() {
                        linkManager.setupLinks();
                        linkManager.setupForms();
                    }
                    setup();
                    $("#preview-frame").load(setup);
                });

                $("#view-preview-preview").change(function() {
                    $("#preview-frame").show();
                    $("#preview-source").hide();
                });
                $("#view-preview-preview").click();
                $("#view-preview-preview").click(function() { $(this).change(); });

                $("#view-preview-source").change(function() {
                    var html = $("#preview-frame").contents().find(":root").html();
                    previewSource.getSession().setValue("\n<" + "html>" + html + '\n<' + '/html>');
                    $("#preview-frame").hide();
                    $("#preview-source").show();
                    previewSource.resize();
                    previewSource.focus();
                });
                $("#view-preview-source").click(function() { $(this).change(); });
            })();

            // Content panel
            (function() {
                
                var contentSource = initEditor('content-source', extensionModes.html, "", true);

                $("#content-frame").ready(function() {
                    var frameHighlighter = new FrameHighlighter("#content-frame", 'content', ruleBuilder);
                    var linkManager = new LinkManager("#content-frame", 'off',  WINDOW_BASE, THEME_BASE_URL);
                    function setup() {
                        frameHighlighter.setupElements();
                        linkManager.setupLinks();
                        linkManager.setupForms();
                    }
                    setup();
                    $("#content-frame").load(setup);
                });

                $("#view-content-preview").change(function() {
                    $("#content-frame").show();
                    $("#content-source").hide();
                });
                $("#view-content-preview").click();
                $("#view-content-preview").click(function() { $(this).change(); });

                $("#view-content-source").change(function() {
                    var html = $("#content-frame").contents().find(":root").html();
                    contentSource.getSession().setValue("<" + "html>\n" + html + '\n<' + '/html>');
                    $("#content-frame").hide();
                    $("#content-source").show();
                    contentSource.resize();
                    contentSource.focus();
                });
                $("#view-content-source").click(function() { $(this).change(); });
            })();

            // Theme panel
            (function() {
                
                var themeSource = initEditor('theme-source', defaultMode, "", false);
                var sourceManager = new SourceManager();

                themeSource.getSession().on('change', function() {
                    if(sourceManager.currentPath != null) {
                        var label = $("#file-selector option:selected").text();
                        if(!label.match(/ \*$/)) {
                            $("#file-selector option:selected").text(label + " *");
                        }
                        dirties[sourceManager.currentPath] = true;
                        sourceManager.markDirty();   
                    }
                });

                function reloadFrame() {
                    var path = $("#file-selector option:selected").val();
                    var fetch = THEME_BASE_URL + "/@@theming-controlpanel-mapper-getframe?path=" + path + "&amp;theme=off";
                    $("#theme-frame").attr('src', fetch);
                }

                function updateSource() {
                    var path = $("#file-selector option:selected").attr('data-path');

                    function savePrevious() {
                        if(sourceManager.currentPath != null && themeSource != null && sourceManager.isDirty()) {
                            sourceManager.setSource(themeSource.getSession().getValue());   
                        }
                    }

                    function initThemeSourceEditor(extension, data) {
                        var mode = defaultMode;
                        if(extension in extensionModes) {
                            mode = extensionModes[extension];
                        }
                        
                        themeSource.getSession().setMode(mode);
                        themeSource.getSession().setValue(data);
                    }

                    function updateView() {
                        $("#theme-frame").hide();
                        $("#theme-source").show();
                        themeSource.resize();
                        $("#theme-save").enable(true);
                    }

                    // Fetch the new source from the cached (possibly edited) copy or the server
                    if(sourceManager.hasSource(path)) {
                        savePrevious();
                        sourceManager.currentPath = null;

                        initThemeSourceEditor(getExtension(path), sourceManager.getSource(path));

                        updateView();
                        sourceManager.currentPath = path;

                        themeSource.focus();
                    } else {
                        $.ajax({
                            url: THEME_BASE_URL + '/@@theming-controlpanel-filemanager-getfile',
                            data: {path: path},
                            dataType: 'json',
                            success: function(data){
                                savePrevious();
                                sourceManager.currentPath = null;

                                initThemeSourceEditor(data.ext, data.contents);
                                sourceManager.setSource(path, data.contents);
                                
                                updateView();
                                sourceManager.currentPath = path;

                                themeSource.focus();
                            }
                        });                               
                    }
                }

                $("#theme-frame").ready(function() {
                    var frameHighlighter = new FrameHighlighter("#theme-frame", 'theme', ruleBuilder);
                    function setup() {
                        frameHighlighter.setupElements();
                    }
                    setup();
                    $("#theme-frame").load(setup);
                });

                $("#file-selector").change(function() {
                    if($("#view-theme-preview").is(":checked")) {
                        reloadFrame();
                    } else if ($("#view-theme-source").is(":checked")) {
                        updateSource();
                    }
                });

                $("#view-theme-preview").change(function() {

                    reloadFrame();

                    $("#theme-frame").show();
                    $("#theme-source").hide();
                    $("#theme-save").enable(false);
                });
                $("#view-theme-preview").click();
                $("#view-theme-preview").click(function() { $(this).change(); });

                $("#view-theme-source").change(function() {
                    updateSource();
                });
                $("#view-theme-source").click(function() { $(this).change(); });

                $("#theme-save").click(function() {
                    var path = sourceManager.currentPath;
                    $.ajax({
                        url: THEME_BASE_URL + '/@@theming-controlpanel-filemanager-savefile',
                        data: {path: path, value: themeSource.getSession().getValue()},
                        type: 'POST',
                        success: function(){
                            var label = $("#file-selector option:selected").text();
                            if(label.match(/ \*$/)) {
                                $("#file-selector option:selected").text(label.substr(0, label.length - 2));
                            }

                            dirties[path] = false;
                            sourceManager.markClean(path);
                            refreshPreview();
                            themeSource.focus();
                        }
                    });

                    return false;
                });
                
            })();

            // Key bindings
            (function() {

                var canon = require('pilot/canon');
                canon.addCommand({
                    name: 'saveEditor',
                    bindKey: {
                        mac: 'Command-S',
                        win: 'Ctrl+S',
                        sender: 'editor'
                    },
                    exec: function(env, args, request) {
                        if($(env.editor.container).is("#theme-source")) {
                            $("#theme-save").click();
                        } else if($(env.editor.container).is("#editor")) {
                            $("#rules-save").click();
                        }
                    }
                });

                canon.addCommand({
                    name: 'newRule',
                    bindKey: {
                        mac: 'Command-N',
                        win: 'Ctrl+N',
                        sender: 'editor'
                    },
                    exec: function(env, args, request) {
                        $("#new-rule").click();
                    }
                });

            })();
            
        });

    });

</script>

</metal:block>
</head>

<body>
<div metal:fill-slot="prefs_configlet_main">

    <h1 class="documentFirstHeading"
        i18n:translate="heading_theme_mapper">Map theme: 
        <span i18n:name="name" tal:content="view/title">name</span></h1>
    
    <a href=""
        class="link-parent"
        tal:attributes="href string:${portal_url}/@@theming-controlpanel"
        i18n:translate="label_up_to_theming_controlpanel">
            Up to Diazo theme control panel
    </a>

    |

    <a class="link-parent"
       tal:attributes="href string:${view/portalUrl}/++theme++${view/name}/@@theming-controlpanel-filemanager"
       i18n:translate="label_up_to_theming_filemanager">
            File manager
    </a>    

    <p class="discreet" i18n:translate="help_theme_mapper">
        Below, you will find four panels: The Diazo rules, a preview of the themed
        site using these rules, the unthemed content and the raw theme.
        You can navigate the content, theme or preview, and change to
        a different theme file if you wish. You can edit the rules and any
        HTML, CSS or JavaScript resources in the theme. When they are saved,
        the preview will reload to show the effects of your changes. Click
        <strong>New rule</strong> to create a new rule using a guided wizard.
    </p>

    <div class="row">
        <div id="editor-area" class="cell width-full position-0">

            <h2 i18n:translate="heading_rules">Rules</h2>

            <p class="discreet" i18n:translate="help_split_content">
                The rules that apply the theme to the content
            </p>

            <div id="mapper-toolbar">
                <button
                    id="rules-save"
                    name="form.button.Save"
                    class="allowMultiSubmit"
                    title="Ctrl+S (Windows/Linux) or Cmd+S (Mac)"
                    i18n:attributes="title"
                    i18n:translate=""
                    >Save</button>
                <button
                    id="new-rule"
                    name="form.button.BuildRule"
                    class="allowMultiSubmit"
                    rel="#new-rule-wizard"
                    title="Ctrl+N (Windows/Linux) or Cmd+N (Mac)"
                    i18n:attributes="title"
                    i18n:translate=""
                    >New rule</button>
                
                <span class="wizard-text" id="new-rule-text-select-content" i18n:translate="theming_mapper_select_content">
                    Select an element in the content panel.
                </span>
                <span class="wizard-text" id="new-rule-text-select-theme" i18n:translate="theming_mapper_select_theme">
                    Select an element in the theme panel.
                </span>
            
            </div>

            <pre class="hideDuringWizard" id="editor"></pre>
            <textarea id="file-contents" class="hiddenStructure" name="rules"
                tal:content="view/rules"></textarea>

        </div>
    </div>

    <div class="row hideDuringWizard">
        <div id="preview" class="cell width-full position-0">
            <h2 i18n:translate="heading_merged">Preview</h2>

            <div class="panel-toolbar">
                <input type="radio" name="view-preview" id="view-preview-preview" value="preview" checked="checked" />
                <label for="view-preview-preview" i18n:translate="">Preview</label>

                <input type="radio" name="view-preview" id="view-preview-source" value="source" />
                <label for="view-preview-source" i18n:translate="">Source</label>
            </div>
            
            <p class="discreet" i18n:translate="help_split_merged">
                The result of applying the rules can be seen below
            </p>

            <iframe id="preview-frame"
                tal:attributes="src string:${view/themeBaseUrl}/@@theming-controlpanel-mapper-getframe?path=/&amp;theme=apply"></iframe>
            <pre class="source-editor" id="preview-source"></pre>

        </div>
    </div>

    <div id="splitview" class="row">
        <div id="content-split" class="cell width-1:2 position-0">
            <h2 i18n:translate="heading_content">Content</h2>

            <div class="panel-toolbar">
                <input type="radio" name="view-content" id="view-content-preview" value="preview" checked="checked" />
                <label for="view-content-preview" i18n:translate="">Preview</label>

                <input type="radio" name="view-content" id="view-content-source" value="source" />
                <label for="view-content-source" i18n:translate="">Source</label>
            </div>

             <p class="discreet" i18n:translate="help_split_content">
                The raw content
            </p>

            <iframe id="content-frame"
                tal:attributes="src string:${view/themeBaseUrl}/@@theming-controlpanel-mapper-getframe?path=/&amp;theme=off"></iframe>
            <pre class="source-editor" id="content-source"></pre>

        </div>
        <div id="theme-split" class="cell width-1:2 position-1:2">
            <h2 i18n:translate="heading_theme">Theme</h2>

            <div class="panel-toolbar">

                <select size="1" name="file-selector" id="file-selector">
                    <option
                        tal:repeat="f view/themeFiles"
                        tal:attributes="value string:${view/themeBasePathEncoded}/${f/path};
                                        data-path f/path;
                                        data-extension f/extension;
                                        selected python:f['path'] == view.defaultThemeFile and 'selected' or None"
                        tal:content="f/path"
                        />
                </select>

                <button
                    id="theme-save"
                    class="save-button"
                    type="button"
                    disabled="disabled"
                    title="Ctrl+S (Windows/Linux) or Cmd+S (Mac)"
                    i18n:attributes="title"
                    i18n:translate="">Save</button>

                <input type="radio" name="view-theme" id="view-theme-preview" value="preview" checked="checked" />
                <label for="view-theme-preview" i18n:translate="">Preview</label>

                <input type="radio" name="view-theme" id="view-theme-source" value="source" />
                <label for="view-theme-source" i18n:translate="">Source</label>

            </div>

            <p class="discreet" i18n:translate="help_split_theme">
                The pristine theme
            </p>

            <iframe id="theme-frame"
                tal:attributes="src string:${view/themeBaseUrl}/@@theming-controlpanel-mapper-getframe?path=/${view/themeBasePathEncoded}/${view/defaultThemeFile}&amp;theme=off"></iframe>
            <pre class="source-editor" id="theme-source"></pre>

        </div>
    </div>

    <div id="unload-warning-text" class="hiddenStructure" i18n:translate="theming_mapper_unload_warning">
        Are you sure you want to leave this page? Unsaved changes will be lost.
    </div>

    <!-- Wizard overlay -->
    <div id="new-rule-wizard" class="overlay">
        <div class="close">
            <span i18n:translate="">Close</span>
        </div>
        <div class="pb-ajax">
            <div class="new-rule">
                <h2 i18n:translate="theming_mapper_heading_newrule">New rule</h2>

                <div id="new-rule-step-1">
                    <p i18n:translate="theming_mapper_wizard_step1">
                        Choose the operation you would like to perform:
                    </p>

                    <form>
                        <div id="new-rule-type-panel">
                            <div>
                                <input type="radio" name="new-rule-type" value="replace" id="new-rule-replace" checked="checked" />
                                <label for="new-rule-replace" i18n:translate="theming_mapping_wizard_replace">
                                    <strong>Replace</strong> an element of the theme with an element from the content
                                </label>
                            </div>
                            <div>
                                <input type="radio" name="new-rule-type" value="before" id="new-rule-before" />
                                <label for="new-rule-before" i18n:translate="theming_mapping_wizard_before">
                                    Insert an element from the content <strong>before</strong> an element in the theme
                                </label>
                            </div>
                            <div>
                                <input type="radio" name="new-rule-type" value="after" id="new-rule-after" />
                                <label for="new-rule-after" i18n:translate="theming_mapping_wizard_after">
                                    Insert an element from the content <strong>after</strong> an element in the theme
                                </label>
                            </div>
                            <div>
                                <input type="radio" name="new-rule-type" value="drop:content" id="new-rule-drop-content" />
                                <label for="new-rule-drop-content" i18n:translate="theming_mapping_wizard_drop_content">
                                    <strong>Drop</strong> an element in the <strong>content</strong>
                                </label>
                            </div>
                            <div>
                                <input type="radio" name="new-rule-type" value="drop:theme" id="new-rule-drop-theme" />
                                <label for="new-rule-drop-theme" i18n:translate="theming_mapping_wizard_drop_theme">
                                    <strong>Drop</strong> an element in the <strong>theme</strong>
                                </label>
                            </div>
                        </div>
                    </form>

                    <div class="new-rule-actions">
                        <button type="button" class="next">Next</button>
                        <button type="button" class="close">Cancel</button>
                    </div>

                </div>
                <div id="new-rule-step-2" style="display:none">
                    <p i18n:translate="theming_mapper_wizard_step2">
                        The rule can be found below. Use the checkboxes
                        to further refine it.
                    </p>
                    <form>
                        <div id="new-rule-output-panel">
                            <textarea name="new-rule-output" id="new-rule-output"></textarea>
                        </div>
                        <div id="new-rule-selector-panel">
                            <div>
                                <input type="checkbox" class="rule-modifier" name="new-rule-content-children" value="replace" id="new-rule-content-children" />
                                <label for="new-rule-content-children" i18n:translate="">Use children of the content</label>
                            </div>
                            <div>
                                <input type="checkbox" class="rule-modifier" name="new-rule-theme-children" value="replace" id="new-rule-theme-children" />
                                <label for="new-rule-theme-children" i18n:translate="">Use children of the theme</label>
                            </div>
                        </div>
                        
                    </form>

                    <div class="new-rule-actions">
                        <button type="button" class="insert">Insert</button>
                        <button type="button" class="close">Close</button>
                    </div>
                </div>

                
            </div>
        </div>
    </div>

</div>
</body>
</html>
